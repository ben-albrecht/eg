#!/bin/bash
################## COMMENTS ##################
#//  file: INP
#//
#//  This script is an attempt to unify all my versions of Format.sh and InFormat.sh (deprecated)
#//  
#//
#//  Programmer:  Ben Albrecht  albrecht.88@osu.edu
#//
#//  Revision history:
#//      4-Mar-2013  original version
#//	 6-Mar-2013  Program Functions, with -aniI options
#//  Contents:
#//    OPTIONCONTROL_
#//    FUNCTIONS_
#//     inp_func ()
#//	    init_func ()
#//	    inf_func ()
#//	    G58_func ()
#//	    G_func ()
#//    MAIN_
#//    
#//  Notes:
#//	Usage: INP [OPTION]
#//	Must be in a directory with updated Truhlar Database directories:
#//   	Gaq / Gnonaq / Grel
#// 	Example: `INP -anr` would format all files
#//	Caps options are unique situations
#//       OPTIONS
#//       -a
#//             Gaq
#//
#//	  -n
#//		Gnonaq
#//
#//	  -r 
#//             Grel	# not functional
#//       
#//       
#//       -I		
#//             Performs InFormat on the selected directories but does NOT format inputs
#//	  
#//	  -G
#//		Performs InFormat for Gas Phase Calculations
#//
#//   To Do:
#//   âˆš. get it working 
#//   1. Fix Problems
#//         File not seded correctly 
#//         INP -ani and INP -anI differ in results
#//         make sure G58 works
#//   2. Get Grel functioning
#//*************************************************************************

################## OPTIONCONTROL_ ##################
OPT_AQ=0; OPT_NONAQ=0; OPT_REL=0;OPT_INF=1;OPT_INF_ONLY=0;OPT_GAS=0; # ALL OPTIONS OFF BY DEFAULT
while getopts "anriIG" OPTION		# Possible Options -a , -n, -r, -i, -I -G
do
   case $OPTION in
	a)  echo "formatting inputs of Gaq"
            OPT_AQ=1;;	
	n)  echo "formatting inputs of Gnonaq"
            OPT_NONAQ=1;;	
	r)  echo "formatting inputs of Grel"
            OPT_REL=1;;	
	I)  echo "performing InFormat with aforementioned directories"
	        OPT_INF_ONLY=1;;
	G)  echo "performing InFormat for Gas Phase Calculations"
	        OPT_GAS=1;;
	\?) echo "Available options: -a (Gaq) -n (Gnonaq) -r (Grel)"
		    exit 1;;			# error msg given
   esac
done
################## FUNCTIONS_ ##################


print_func () {
    echo $file
    if [ $1 = 58 ]; then      
        echo "i58 = $i58"	#Input File G58
        echo "j58 = $j58"	#Input File Q58
        echo "q58 = $q58"	# q58 mod 5 = 1 -> new file Q
    else
        echo "i = $i"	#Input File G
        echo "j = $j"	#Input File Q
        echo "q = $q"	# q mod 100 = 1 -> new file Q
    fi
}

comments_func () {
    ##$Comments Section##
    file_name=`ls $file | sed ' s/.g03//' `
    directory=`grep -i "DIRECTORY:" $file | awk '{print $2}' `
    solvent=`grep -i "SOLVENT:" $file | awk '{print $2}' `
    printf "\n" >> $inp_file
    printf "\$comment\n" >> $inp_file
    printf "DIRECTORY: $directory\n" >> $inp_file
    printf "SOLVENT: $solvent\n" >> $inp_file
    printf "FILE: $file_name\n" >> $inp_file
    printf "\$end\n" >> $inp_file
}

inp_func () {
# $1 = Directory
    cd $1		
    for file in *.g03 ; do
        DIELEC=`grep "DIELEC" $file | awk '{print $NF}'`
        inp_file=`ls $file | sed ' s/g03/in/' `
        # File OverWrite occurs here:
        cat ../template.in | inp.awk inp_opt=$INP_OPT molecule_mark=$MOLECULE_MARK dielec_mark=$DIELEC_MARK dielec=$DIELEC > $inp_file
        cat $file | molecule_coords.awk  >> $inp_file
        comments_func
        if [ $((i%10)) -eq 0 ]; then
	      echo $N
        fi
        let "N+=1"   
    done #for file in *.in
    cd ../ #Leaving $1 (directory) 
    let "i+=-1" #correction
    echo "Total Files formatted in $1 : $N"
}

G58_func () {
    cat $inp_file >> ../MainFiles/Q58_$j58.in
     	echo " " >> ../MainFiles/Q58_$j58.in
        echo @@@ >> ../MainFiles/Q58_$j58.in
    let "i58+=1"
    q58=`expr $i58 "%" 5`
    if [ $q58 -eq 1 ] ; then
        let "j58+=1"
        echo "j58=$j58"
    fi
}

G_func () {
    cat $inp_file >> ../MainFiles/Q_$j.in
    echo " " >> ../MainFiles/Q_$j.in
    echo @@@ >> ../MainFiles/Q_$j.in
    let "i+=1"          
    q=`expr $i "%" 100`
    if [ $q -eq 1 ] ; then # Start a new file
        let "j+=1"
        echo "j=$j"
    fi
}

inf_func () {
    # $1 = Directory
    #Creating MainFiles if it does not exist
    if [ ! -d "MainFiles" ]; then	#verifies MainFiles exists as a directory
        echo "MainFiles does not exist:"
        echo "mkdir MainFiles"
        mkdir MainFiles
    fi
    
    # $donotremove = 0, rm -f MainFiles/*
    if [ $donotremove -eq 0 ]; then
        echo "cd MainFiles"
        cd MainFiles
        #Removing Trash in MainFiles (only the first time)
        echo "rm -f *.o'[0-9]'* - (not actual command)"
        for trash in *.o'[0-9]'* ; do 
            echo "rm -f $trash"
            rm -f $trash	#change to rm -f
        done
        echo "rm -f *.in"
        rm -f *.in
        echo "rm -f *.pbs"
        rm -f *.pbs
        echo "rm -f *.txt"
        rm -f *.txt
        donotremove=1  # Won't delete files anymore after this is set to 0
        echo "cd ../"
        cd ../ 
    fi
    
    cd $1
    for file in *.g03 ; do
        directory=`grep -i "DIRECTORY:" $file | awk '{print $2}' `
        inp_file=`ls $file | sed ' s/g03/in/' `
        if [ $directory == "G58_aq_neu" ] ; then
            print_func 58
      	    G58_func 	# 5 per file, because G58 files are large solutes
        else
            print_func 1
      	    G_func		# 100 per file because mostly small solutes PROBLEM
        fi
    done
}

init_func () {
    #Counters
     #inp_func ()
      N=1	#Input Files Formatted
     #inf_func ()
      i=1	#Input File G
      j=1	#Input File Q
      q=1	# q mod 100 = 1 -> new file Q
      i58=1	#Input File G58
      j58=1	#Input File Q58
      q58=0	# q58 mod 5 = 1 -> new file Q
      donotremove=0 
    if [ ! -e "template.in" ]; then 
      echo "template.in not present, please make a template.in file"
      exit 1
    fi
    
    if [ $OPT_GAS -eq 0 ]; then
      pcm_solvent=`grep -c \$"pcm_solvent" template.in`
      svp=`grep -c \$"svp" template.in`
      if [ $pcm_solvent -eq 1 ]; then
        DIELEC_MARK=`grep -n Dielectric template.in | awk 'BEGIN{FS=":"} { print $1}'`
        INP_OPT="Dielectric "
      elif [ $svp -eq 1 ]; then
        DIELEC_MARK=`grep -n DIELST template.in | awk 'BEGIN{FS=":"} { print $1}'`
        INP_OPT="DIELST="
      else
       echo "No Dielectric constant parameter!"
       echo "Use -G if this is a gas-phase calculations!"
       exit 1
      fi 
    fi	# if [ OPT_GAS -eq 0 ]
    MOLECULE_MARK=`grep -n \$"molecule" template.in | awk 'BEGIN{FS=":"} { print $1}'`
}

pbs_func () {
    cd ../MainFiles/
    if [ -a Q_1.in ]; then
        for Qfile in Q_*.in ; do
            Qname=`ls $Qfile|sed ' s/.in//'`
            cat ../template.pbs|sed s/molecule/$Qname/g > $Qname.pbs
     	    sed -i '$d' $Qfile
        done
    fi
    if [ -a Q58_1.in ]; then
        for Q58file in Q58_*.in ; do
            Q58name=`ls $Q58file|sed ' s/.in//'`
            cat ../template.pbs|sed s/molecule/$Q58name/g > $Q58name.pbs
    	    sed -i '$d' $Q58file # Removes final line ( extra @@@ )
        done
    fi 
    cd ../
}
################ MAIN_  #################   

init_func


if [ $OPT_INF_ONLY -eq 1 ]; then
    if [ $OPT_AQ -eq 1 ]; then  
        inf_func Gaq
    fi	 # fi [ $OPT_AQ -eq 1 ]
    if [ $OPT_NONAQ -eq 1 ]; then
        inf_func Gnonaq
    fi	 # fi [ $OPT_AQ -eq 1 ]
    if [ $OPT_REL -eq 1 ]; then
        inf_func Grel
    fi	 # fi [ $OPT_AQ -eq 1 ]
else
    if [ $OPT_AQ -eq 1 ]; then  
        inp_func Gaq
    fi
    if [ $OPT_NONAQ -eq 1 ]; then
        inp_func Gnonaq
    fi
    if [ $OPT_REL -eq 1 ]; then
        inp_func Grel
    fi

    init_func

    if [ $OPT_AQ -eq 1 ]; then
         inf_func Gaq
    fi
    if [ $OPT_NONAQ -eq 1 ]; then
        inf_func Gnonaq
    fi
    if [ $OPT_REL -eq 1 ]; then
        inf_func Grel
    fi
fi

pbs_func


echo "INP Finished"
