#!/bin/bash

#//  file: SCFE
#//
#//  This script is an attempt to unify all my versions of Convergence (deprecated)
#//  into one script, which can be called from anywhere (as long as a Gaq, Gnonaq, or Grel is present!)
#//
#//  Programmer:  Ben Albrecht  albrecht.88@osu.edu
#//
#//  Revision history:
#//      14-Feb-2013  original version
#//
#//  Contents:
#//    OPTIONCONTROL_
#//    FUNCTIONS_
#//    MAIN_
#//    FILEREMOVAL_
#//    
#//  Notes:
#//	Usage: SCFE [OPTION]
#//	Must be in a directory with updated Truhlar Database directories:
#//   	Gaq / Gnonaq / Grel
#// 	Example: `SCFE -anr` would grep all files
#//	Caps options are unique situations
#//       OPTIONS
#//       -a
#//             Gaq
#//
#//	  -n
#//		Gnonaq
#//
#//	  -r 
#//             Grel	# not functional
#//       
#//       -A		
#//             True Aqueous:G112 and G274 directory files only: aq_ions_unclust and aq_neu ; option will grep file inputs for these 
#//
#//   To Do:
#//   √. get it working 
#//   1. Update error messages and make more reliable/helpful √
#//   	1.1 Fix error messages in Data file
#//   2. Get Grel functioning
#//   3. Implement SVP compability (directly greps hydration energies, and only aqeuous solns): 
#//	3.1 G112 G274 only 
#//   x. allow compatibility with old versions of Truhlar directories
#//*************************************************************************
################## OPTIONCONTROL_ ##################
OPT_AQ=0; OPT_NONAQ=0; OPT_REL=0;OPT_A=0; # ALL OPTIONS OFF BY DEFAULT
while getopts "anrAH" OPTION		# Possible Options -a , -n, -r, -H, -A
do
   case $OPTION in
	a)  echo "grepping for converged self-consistent field energies in outputs of Gaq"
            OPT_AQ=1;;	
	n)  echo "grepping for converged self-consistent field energies in outputs of Gnonaq"
            OPT_NONAQ=1;;	
	r)  echo "grepping for converged self-consistent field energies in outputs of Grel"
            OPT_REL=1;;	
	A)  echo "grepping for converged self-consistent field energies in outputs of G112 and G274 (in Gaq)"
            OPT_A=1
	    OPT_AQ=0;; 
	\?) echo "Available options: -a (Gaq) -n (Gnonaq) -r (Grel"
		exit 1;;			# error msg given
   esac
done


################ FUNCTIONS_  #################   
error_func() {
#grep "Q-Chem fatal error" Gaq/* | grep scfman | awk '{print $8}'
	### GREP FOR POSSIBLE ERRORS ###
	check=0				# check = 0 => successful job
	grepQ=`grep -c "Q-Chem" $file`	#1st degree check => Q-chem output contents exist?
	grepC=`grep -c "energy in the final basis set" $file` 	#2nd degree check => SCF energy converged?
	grepE=`grep -c "Q-Chem fatal error" $file` 	#3rd degree check => Error message provided?
	#Error Messages
	err_msg=`grep "Q-Chem fatal error occurred in module" $file | sed 's/,//' | awk '{print ($(NF-2))}'`
	#err_scf=`grep -c "Q-Chem fatal error occurred in module scfman.C" $file` 	#Ran out of SCF cycles?
	#err_mem=`grep -c "Q-Chem fatal error occurred in module NewQAlloc.C" $file` 	#Ran out of memory?
	#err_hon=`grep -c "Q-Chem fatal error occurred in module hondo_wrappers.F" $file`	#hondo_wrappers?
	#err_jac=`grep -c "Q-Chem fatal error occurred in module diagjacobi.F" $file `		#diagjacobi.F?
	### ERROR CHECKING FOR FAILED CALCS ###
	if [ $grepQ -gt 0 ]; then
	  if [ $grepE -gt 0 ]; then
	    check=2 		#Error message detected
	  else
	    if [ $grepC -eq 0 ]; then
	      check=1		#No error, no SCF Energy
	    fi
	  fi
	else
	  check=3		 #Q-Chem not grepped, file empty?
	fi
	
	### ERROR REPORTING FOR FAILED CALCS ###
	case $check in
	0)	#no error, do nothing (success)
	  ;;
	1)	#error, but no error message given
	  echo $i >> ../error1.txt
	  echo `pwd`/$file >> ../error3.txt 
          echo "CONVERGENCE (no error msg)" >> ../temp4.txt #Relays reason of failure to temp4.txt, fail reason list   
	  ;;
	2)	#error, error message given, accounts for multiple error messages
          echo $i >> ../error1.txt
          echo `pwd`/$file >> ../error3.txt 
          echo $err_msg >> ../temp4.txt
	  ;;
       3) 	#error, no output file contents
	  echo $i >> ../error1.txt
	  echo `pwd`/$file >> ../error3.txt
          echo "FILE (NO Q-Chem GREPPED)" >> ../temp4.txt         #Relays reasons of failure to temp4.txt, fail reason list
          ;;
	esac
}

main_func () {
# $1 = Directory
# $2 = only outputs that contain this string
    cd $1		
    
    for file in *.out ; do
	
	        
	#Obtaining the free energy in which the calculation has convered to. $ENERGY will dump into final energy output    
#GAS: "SCF   energy in the final basis set" $NF
#PCM: "
#FESR: " Total Free Energy (H0 + V/2 + non-elec + FESR) =" $NF
	ENERGY=`grep "SCF   energy in the final basis set" *$file | tail -1 | awk '{print $NF}'`
	#`grep "SCF   energy in the final basis set" $file | tail -1 | awk '{print $10}'`
	#`grep "Convergence criterion met" $file | tail -1 | awk '{printf ($2 "\n")}'`
	
    	\echo "$file	$ENERGY"

	#Information Gathering

	molecule=`ls $file|sed ' s/.out// '` 		#Obtains molecule name        
	

	error_func 	
	
	i=`echo $i + 1 | bc `   #Number of total files
		
		if [ $check -eq 0 ]; then
		  j=`echo $j + 1 | bc ` #Number of successful files, must pass all grepchecks to +1
                  echo $ENERGY >> ../.ENERGY_$FOLDER.txt	#FINAL RESULT DESIRED (ASIDE FROM TRANSFER ENERGIES)
	          echo $molecule$solvent >> ../temp7.txt        #Relays our specific naming system to temp7.txt for final ENERGY_$FOLDER.txt 
                fi
    done #for file in *.out
    cd ../ #Leaving $1 (directory) 
}

rmf_func () {
#temps
rm -f ./temp2.txt #Collected - fails (Molecule name)
rm -f ./temp4.txt #Reason for failure
rm -f ./temp7.txt
rm -f ./error1.txt  #error counter text
rm -f ./error2.txt  #error molecule name text
rm -f ./error3.txt  #error pwd list
if [ $1 == "final" ]; then
echo "SCFE finished"
fi
if [ $1 == "init" ]; then
  rm -f ./listcovergence.txt # gibbs energies of non-G286
  rm -f ./listfails.txt     #List of fails to converge, or errors
  rm -f ./Data.txt #List of grepped "Convergence" incidents
  rm -f ./Errors.txt

  FOLDER=`pwd | awk 'BEGIN { FS = "/" } ; {printf("%s\n",$6)}'` 	# THIS ASSUMES DIRECTORY IS WITHIN '~/Project1/'
  rm -f .ENERGY_$FOLDER.txt
  rm -f ENERGY_$FOLDER.txt
fi
}

################ FILEREMOVAL_ #################                                                                            
echo "removing all temps, errors, data, list, and energy files in this directory is this OK? (ctrl-c if not)"
read answer

rmf_func init 		 #argument of init deletes important files too (Errors, Data, etc.)

################ MAIN_  #################   
i=1	# counter: number of calculations detected

j=1	# counter: number of successful calculations

if [ $OPT_AQ -eq 1 ]; then
   main_func Gaq
fi	 # fi [ $OPT_AQ -eq 1 ]


if [ $OPT_NONAQ -eq 1 ]; then
   main_func Gnonaq
fi	 # fi [ $OPT_AQ -eq 1 ]


if [ $OPT_REL -eq 1 ]; then
   main_func Grel
fi	 # fi [ $OPT_AQ -eq 1 ]

   

\echo "---------{End of Script Things} -----------"

#End of script stuff
#----------------------------------------------------------------------------------------

#Counter Correction

#let "i+=-1"
#let "j+=-1"
i=`echo $i - 1 | bc `
j=`echo $j - 1 | bc `

#GAS 
paste temp7.txt .ENERGY_$FOLDER.txt > ENERGY_$FOLDER.txt

#PCM Grel
#if [ $pcm -gt 0 ]; then
#	#FOR ALL EXCEPT G286
#	#FOR G86
#	paste temp5water.txt .water_convergence.txt > .UnsortedEnergies_W.txt
#	paste temp5solvent.txt .solvent_convergence.txt > .UnsortedEnergies_S.txt
#	paste .UnsortedEnergies_S.txt .UnsortedEnergies_W.txt | awk '{printf("%30s %20.10f\n",$1, 627.50947*($2 - $4))}' > .temp
#	sort .temp > ENERGY_$FOLDER\_TRANSFER.txt
#fi 

#Errors
\echo "i=$i"
\echo "j=$j"
if [ $i -gt $j ]; then
   paste  error1.txt error3.txt temp4.txt >> Errors.txt
   cp ../MasterErrors.txt ../.mastertemp.txt
   awk -vFOLDER=$FOLDER 'match($0,FOLDER) == 0 {print $0}' ../.mastertemp.txt > ../MasterErrors.txt
   cat ./Errors.txt >> ../MasterErrors.txt
fi

echo "Total Number of successful outputs: " $j
echo "Total Number of outputs grepped: " $i
#expect 3066 for pcm
#expect 2780? for gas

 
### FILE REMOVAL ###

rmf_func final

exit 1
